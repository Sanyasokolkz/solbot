import asyncio, os
from telethon import TelegramClient, events
from config import (
    api_id, api_hash, session_name, BOT_TOKEN,
    channel_list, ADMIN_USER_ID, save_channels
)
from TGparser import find_solana_contract

# ------ –±–æ—Ç-—Å–µ—Å—Å–∏—è ------
client = TelegramClient(session_name, api_id, api_hash)\
           .start(bot_token=BOT_TOKEN)

# ------ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ ------
async def send_to_wizard(contract: str):
    try:
        await client.send_message(os.getenv("WIZARD_CHAT_ID"), contract)
        print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")

# ------ –ø–∞—Ä—Å–µ—Ä ------
@client.on(events.NewMessage(chats=channel_list))
async def handler(event):
    contract = find_solana_contract(event.raw_text)
    if contract:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç: {contract}")
        await send_to_wizard(contract)

# ------ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É ------
@client.on(events.NewMessage(pattern=r"^/add\s+(@?\S+)", from_users=ADMIN_USER_ID))
async def add_ch(event):
    ch = event.pattern_match.group(1)
    if ch not in channel_list:
        save_channels(channel_list + [ch])
    await event.reply(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–∞–Ω–∞–ª {ch}")

@client.on(events.NewMessage(pattern=r"^/del\s+(@?\S+)", from_users=ADMIN_USER_ID))
async def del_ch(event):
    ch = event.pattern_match.group(1)
    if ch in channel_list:
        save_channels([x for x in channel_list if x != ch])
    await event.reply(f"‚ùå –£–¥–∞–ª—ë–Ω –∫–∞–Ω–∞–ª {ch}")

@client.on(events.NewMessage(pattern="^/list$", from_users=ADMIN_USER_ID))
async def list_ch(event):
    await event.reply("üìã –¢–µ–∫—É—â–∏–µ –∫–∞–Ω–∞–ª—ã:\n" + "\n".join(channel_list))

# ------ —Å—Ç–∞—Ä—Ç ------
async def main():
    print("üöÄ –ë–æ—Ç —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã:", ", ".join(channel_list))
    await client.run_until_disconnected()

if __name__ == "__main__":
    asyncio.run(main())
